// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package handler

import (
	"github.com/arifai/zenith/cmd/wire/common"
	"github.com/arifai/zenith/cmd/wire/repository"
	"github.com/arifai/zenith/config"
	"github.com/arifai/zenith/internal/handler"
	repository2 "github.com/arifai/zenith/internal/repository"
	"github.com/arifai/zenith/internal/service"
	"github.com/arifai/zenith/pkg/logger"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func ProvideHandler() *handler.Handler {
	response := common.ProvideResponse()
	handlerHandler := handler.New(response)
	return handlerHandler
}

func ProvideAccountHandler(db *gorm.DB, rdb *redis.Client, cfg *config.Config, log logger.Logger) *handler.AccountHandler {
	response := common.ProvideResponse()
	handlerHandler := handler.New(response)
	serviceService := service.New(cfg, log)
	repositoryRepository := repository.ProvideRepository(db, rdb)
	accountRepository := repository2.NewAccountRepository(repositoryRepository)
	accountService := service.NewAccountService(serviceService, accountRepository)
	accountHandler := handler.NewAccountHandler(handlerHandler, accountService)
	return accountHandler
}

func ProvideNotificationHandler(db *gorm.DB, rdb *redis.Client, cfg *config.Config, log logger.Logger) *handler.NotificationHandler {
	response := common.ProvideResponse()
	handlerHandler := handler.New(response)
	serviceService := service.New(cfg, log)
	repositoryRepository := repository.ProvideRepository(db, rdb)
	notificationRepository := repository2.NewNotificationRepository(repositoryRepository)
	notificationService := service.NewNotificationService(serviceService, notificationRepository)
	notificationHandler := handler.NewNotificationHandler(handlerHandler, notificationService)
	return notificationHandler
}
